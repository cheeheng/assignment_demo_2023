# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go
# Note: putting version of go as 1.19 here because GitHub Actions does not support go 1.20 yet

name: Tests

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  http-server:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./http-server
    steps:
      - uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.19

      - name: Build
        run: go build -v ./...

      - name: Test
        run: go test -race -cover -coverprofile=coverage.out $(go list ./... | grep -Ev "_gen") -coverpkg $(go list ./... | grep -Ev "_gen" | tr "\n" "," | sed 's/.$//')

      - name: Show coverage
        run: go tool cover -func=coverage.out | awk 'END {print $NF}'

  rpc-server:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./rpc-server
    # Install PostgreSQL for rpc-server to run
    # https://github.com/actions/example-services/issues/22#issuecomment-633220291
    services:
      postgres:
        image: postgres:latest 
        env:
          POSTGRES_PASSWORD: blank
          POSTGRES_USER: postgres
          POSTGRES_DB: assignment_2023_demo_test
        # Wait for PostgreSQL to start
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.19
      
      # Access PostgreSQL, reference:
      # https://remarkablemark.org/blog/2021/03/14/setup-postgresql-in-github-actions/
      # Create database if it does not exists, deleting all existing data, reference:
      # https://stackoverflow.com/questions/18389124/simulate-create-database-if-not-exists-for-postgresql
      # Run PostgreSQL script using command line
      # https://stackoverflow.com/questions/9736085/run-a-postgresql-sql-file-using-command-line-arguments
      # Since drop database and create database cannot be done in a transaction block, I need to set autocommit to on. Reference: 
      # https://stackoverflow.com/questions/26482777/create-database-cannot-run-inside-a-transaction-block
      - name: Set up PostgreSQL
        run: | 
          PGPASSWORD=blank psql -h localhost -d postgres -U postgres -c '\set AUTOCOMMIT on\nDROP DATABASE IF EXISTS assignment_2023_demo_test; CREATE DATABASE assignment_2023_demo_test;'
          PGPASSWORD=blank psql -h localhost -d assignment_2023_demo_test -U postgres -a -f ../sql/create_tables.sql

      - name: Build
        run: go build -v ./...

      - name: Test
        run: go test -race -cover -coverprofile=coverage.out $(go list ./... | grep -Ev "_gen") -coverpkg $(go list ./... | grep -Ev "_gen" | tr "\n" "," | sed 's/.$//')

      - name: Show coverage
        run: go tool cover -func=coverage.out | awk 'END {print $NF}'

  docker-compose:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Run Docker Compose
        run: docker-compose up -d

      - name: Check service status
        run: |
          if docker-compose ps | grep -q 'Exit'; then
            echo "Some services exited unexpectedly"
            exit 1
          else
            echo "All services are running"
          fi
